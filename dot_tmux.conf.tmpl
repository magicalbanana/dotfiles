# list keybindings: tmux list-keys

# set default shell
{{ if eq .chezmoi.os "darwin" }}
set -g default-command "reattach-to-user-namespace -l $SHELL"
{{ else }}
set -g default-command "$SHELL -l"
{{ end  }}
set -g default-shell "$SHELL"

# tmux should be pretty, we need 256 color for that
set -g default-terminal "tmux-256color"
set -a terminal-overrides ",alacritty:RGB"
set -a terminal-overrides ",alacritty:Tc"
set -a terminal-overrides ",*256col*:RGB"
set -a terminal-overrides ",*256col*:Tc"

# scrollback buffer n lines
set -g history-limit 20000

# enable mouse pointer actions
set -g mouse on

set -g visual-activity on

# -------------------------------------------------------------------
# Window options
# -------------------------------------------------------------------

# monitor activity between windows
setw -g monitor-activity on
setw -g automatic-rename on
setw -g automatic-rename-format '#I:#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
setw -g aggressive-resize on
setw -g mode-keys vi

set -g allow-rename on
set -g set-titles on
set -g set-titles-string '#H: [#S.#I.#P] #W'
set -g renumber-windows on

# -------------------------------------------------------------------
# Key bindings
# -------------------------------------------------------------------
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# more intuitive keybindings for splitting
unbind %
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
bind | split-window -h -c "#{pane_current_path}"
unbind c
bind c new-window -c "#{pane_current_path}"
unbind C
bind C new-window

bind-key J command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key S command-prompt -p "send pane to:"  "join-pane -t '%%'"

# Pane movement
bind Left select-pane -L
bind Right select-pane -R
bind Up select-pane -U
bind Down select-pane -D
bind h select-pane -L
bind l select-pane -R
bind j select-pane -U
bind k select-pane -D

# Moving windows
bind-key -r > swap-window -d -t :+
bind-key -r < swap-window -d -t :-

# Back and forth
bind-key bspace previous-window
bind-key space next-window
bind-key / next-layout # Overridden

# Synchronize panes
bind-key * set-window-option synchronize-pane

# -------------------------------------------------------------------
# panes/windows
# -------------------------------------------------------------------
set -g pane-border-style fg=black
set -g pane-active-border-style fg=brightred

# messaging
set -g message-style fg=black,bg=yellow
set -g message-command-style fg=blue,bg=yellow

#window mode
setw -g mode-style bg=colour6,fg=colour0

# status
set -g status-interval 1
set -g status-position top
set -g status-justify left
# show current mode
set -g status-left "#{?client_prefix,#[bg=red]tmux,#[bg=blue]term}"
set -g status-right "#[fg=green]#($TMUX_PLUGIN_MANAGER_PATH/tmux-mem-cpu-load/tmux-mem-cpu-load --colors --powerline-right --interval 2)#[default]"

unbind p
bind p paste-buffer

setw -g clock-mode-colour colour135
setw -g mode-style bg=colour238,fg=colour196,bold

# }

# The pane {
set -g pane-border-style bg=colour235,fg=colour238
set -g pane-active-border-style bg=colour237,fg=colour251
# }

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1

if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @tpm_plugins '       \
  tmux-plugins/tpm          \
  tmux-plugins/tmux-yank    \
  tmux-plugins/tmux-copycat \
  laktak/extrakto           \
  thewtex/tmux-mem-cpu-load \
  arcticicestudio/nord-tmux \
'

# vi-copy keys
# -----------------------------------------------
set -g @yank_action 'copy-pipe-no-clear'
set -g @copy_use_osc52_fallback on

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"
yank="~/.tmux/yank.sh"

bind -T copy-mode DoubleClick1Pane select-pane \;\
  send -X select-word \;\
  send -X copy-pipe-no-clear "$yank"
bind -T copy-mode-vi DoubleClick1Pane select-pane \;\
  send -X select-word \;\
  send -X copy-pipe-no-clear "$yank"
bind -n DoubleClick1Pane select-pane \;\
  copy-mode -M \; send -X select-word \;\
  send -X copy-pipe-no-clear "$yank"
bind -T copy-mode TripleClick1Pane select-pane \;\
  send -X select-line \;\
  send -X copy-pipe-no-clear "$yank"
bind -T copy-mode-vi TripleClick1Pane select-pane \;\
  send -X select-line \;\
  send -X copy-pipe-no-clear "$yank"
bind -n TripleClick1Pane select-pane \;\
  copy-mode -M \;\
  send -X select-line \;\
  send -X copy-pipe-no-clear "$yank"
bind -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$($yank)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"

bind -T copy-mode    C-c send -X copy-pipe-no-clear "$yank"
bind -T copy-mode-vi C-c send -X copy-pipe-no-clear "$yank"
bind-key y send-keys C-l C-a \; run-shell 'sleep 2.25' \;\
  copy-mode \; send-keys -X begin-selection \;\
  send-keys -X -N 100 'cursor-down' \;\
  send-keys -X 'end-of-line' \;\
  send-keys -X 'previous-word' \;\
  send-keys -X 'next-word-end' \;\
  send-keys -X copy-pipe-and-cancel "$yank" \;\
  send-keys C-e \;\
  display-message "line copied"

bind -T copy-mode-vi Y send-keys -X copy-line

bind -T copy-mode-vi / command-prompt -i -p "(search down)" "send -X search-forward-incremental \"%%%\""
bind -T copy-mode-vi ? command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""

# renew environment
# -------------------------------------
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'
