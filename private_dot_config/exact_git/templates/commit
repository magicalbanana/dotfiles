
# A properly formed Git commit subject line should always be able to complete
# the following sentence:
#     * If applied, this commit <will your subject line here>
#
# [Add/Fix/Remove/Update/Refactor/Document/Style]: [issue #id] [summary]


# The 7 rules of a great commit message
#    1. Separate subject from body with a blank line
#    2. Limit the subject line to 50 characters
#    3. Capitalize the subject line
#    4. Do not end the subject line with a period
#    5. Use the imperative mood in the subject line
#    6. Wrap the body at 72 characters
#    7. Use the body to explain what and why vs. how



# HEADER: <type>(<scope>): <subject>, 50 chars --|

# BODY: optional, 72 chars --------------------------------------------|

# FOOTER(S): optional, 72 chars ---------------------------------------|
#   BREAKING CHANGE:
#   CLOSED ISSUES:

# COMMIT GUIDELINES: Conventional Commits + AngularJS style -----------|
# Types:
#   - chore: change the tools and libraries
#   - ci: change the build process
#   - docs: edit the documentation
#   - feat: add a new feature
#   - fix: patch a bug
#   - perf: optimize performance with a code change
#   - refactor: modify code but no fixes or new features
#   - revert: revert to a previous commit
#   - style: modify code without affecting its meaning
#   - test: add missing or correct existing tests
#   - wip: mark a feature branch as work in progress
# Scope: (optional) noun describing a section of the codebase.
# Subject: imperative mood, start with lowercase, no ending punctuation.
# Breaking changes: `!` after type/scope or `BREAKING CHANGE` in footer.
#
# See https://www.conventionalcommits.org/
# See https://github.com/angular/angular.js/blob/master/DEVELOPERS.md
