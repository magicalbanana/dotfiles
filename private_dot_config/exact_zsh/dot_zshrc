# vim: ft=zsh

source "${HOME}/.shtils"

echo-eval() { echo_eval "$@" }
echo-run() { echo_run "$@" }
safe-run() { safe_run "$@" }

echo-array() {
  local variable_name="${1:-path}"
  local count="${#${(P)variable_name}}"
  local width="${#count}"
  local i
  for i in {1..$count}; do
    echo "${(l:$width:)i}: ${${(P)variable_name}[$i]}"
  done
}

echo-assoc-array() {
  local key val var_name="$1"
  for key val ("${(@Pkv)var_name}"); do
    echo "$key -> $val"
  done
}

alias echo-path="echo-array path"
alias echo-fpath="echo-array fpath"

typeset -A ZINIT
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

zinit snippet OMZL::clipboard.zsh
zinit snippet OMZL::directories.zsh
zinit snippet OMZ::plugins/git/git.plugin.zsh

zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
 blockf \
    zsh-users/zsh-completions \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions

zinit wait lucid as=program pick="$ZPFX/bin/(fzf|fzf-tmux)" \
    atclone="cp shell/completion.zsh _fzf_completion; \
      cp bin/(fzf|fzf-tmux) $ZPFX/bin" \
    make="PREFIX=$ZPFX install" for \
        junegunn/fzf

zinit ice from"gh-r" as"command" atload'eval "$(starship init zsh)"'
zinit load starship/starship

zinit load 'zsh-users/zsh-history-substring-search'
zinit ice wait atload'_history_substring_search_config'

zinit ice lucid wait as"completion" blockf has"asdf"
zinit snippet https://raw.githubusercontent.com/asdf-vm/asdf/refs/tags/v0.14.1/completions/_asdf
zinit ice lucid wait as'completion' blockf has'cargo'
zinit snippet https://github.com/rust-lang/cargo/blob/master/src/etc/_cargo
zinit ice lucid wait as"completion" blockf has"docker"
zinit snippet https://raw.githubusercontent.com/docker/cli/master/contrib/completion/zsh/_docker
zinit ice lucid wait as"completion" blockf has"fd"
zinit snippet https://raw.githubusercontent.com/sharkdp/fd/master/contrib/completion/_fd
zinit ice lucid wait as'completion' blockf has'ghq'
zinit snippet https://github.com/x-motemen/ghq/blob/master/misc/zsh/_ghq
zinit ice lucid wait as'completion' blockf has'kubectx'
zinit snippet https://raw.githubusercontent.com/ahmetb/kubectx/master/completion/_kubectx.zsh
zinit ice lucid wait as'completion' blockf has'kubens'
zinit snippet https://raw.githubusercontent.com/ahmetb/kubectx/master/completion/_kubens.zsh
zinit ice lucid wait as'completion' blockf has'mpv'
zinit snippet https://github.com/mpv-player/mpv/blob/master/etc/_mpv.zsh
zinit ice lucid wait as'completion' blockf has'pandoc'
zinit light srijanshetty/zsh-pandoc-completion
zinit ice lucid wait as'completion' blockf has'rustc'
zinit snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rust/_rustc

zinit ice lucid wait as'completion' blockf has'chezmoi'
zinit snippet "${ZDOTDIR}/completions/_chezmoi"
zinit ice lucid wait as'completion' blockf has'just'
zinit snippet "${ZDOTDIR}/completions/_just"
zinit ice lucid wait as'completion' blockf has'kind'
zinit snippet "${ZDOTDIR}/completions/_kind"
zinit ice lucid wait as'completion' blockf has'rg'
zinit snippet "${ZDOTDIR}/completions/_rg"

zinit has'zoxide' wait lucid for atload="eval $(zoxide init --cmd cd zsh)" \
  z-shell/zsh-zoxide

zinit has'fzf' wait lucid for \
  unixorn/fzf-zsh-plugin

zinit ice wait lucid
zinit load wfxr/forgit

zinit lucid as=program pick="$ZPFX/bin/(fzf|fzf-tmux)" \
    atclone="cp shell/completion.zsh _fzf_completion; \
      cp bin/(fzf|fzf-tmux) $ZPFX/bin" \
    make="PREFIX=$ZPFX install" for \
        junegunn/fzf

zinit ice wait lucid
zinit light Aloxaf/fzf-tab

zi light zsh-users/zsh-history-substring-search
  zmodload zsh/terminfo
  [ -n "${terminfo[kcuu1]}" ] && bindkey "${terminfo[kcuu1]}" history-substring-search-up
  [ -n "${terminfo[kcud1]}" ] && bindkey "${terminfo[kcud1]}" history-substring-search-down
  bindkey -M emacs '^P' history-substring-search-up
  bindkey -M emacs '^N' history-substring-search-down
  bindkey -M vicmd 'k' history-substring-search-up
  bindkey -M vicmd 'j' history-substring-search-down

autoload -Uz compinit

if [ $(date +'%j') != $(date -r ${ZDOTDIR:-$HOME}/.zcompdump +'%j') ]; then
  compinit;
else
  compinit -C;
fi

if command_exists kubectl; then
  source <(kubectl completion zsh)
fi

if command_exists helm; then
  source <(helm completion zsh)
fi

if [ ! -d "${HOME}/.local/share/zsh" ]; then
  mkdir -p "${HOME}/.local/share/zsh"
fi
HISTFILE="${HOME}/.local/share/zsh/history"

# make some commands not show up in history
HISTIGNORE="ls:ll:la:cd:cd -:pwd:exit:date:* --help"
HISTSIZE=10000000
SAVEHIST=10000000

# setopts
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_all_dups   # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data
setopt always_to_end          # cursor moved to the end in full completion
setopt hash_list_all          # hash everything before completion
setopt completealiases        # complete alisases
setopt always_to_end          # when completing from the middle of a word, move the cursor to the end of the word
setopt complete_in_word       # allow completion from within a word/phrase
setopt nocorrect              # spelling correction for commands
setopt list_ambiguous         # complete as much of a completion until it gets ambiguous.
setopt nolisttypes
setopt listpacked
setopt automenu
setopt autocd                 # no need ot put CD when traversing directories
unsetopt BEEP
setopt vi

if command_exists docker; then
  if docker compose >/dev/null 2>&1; then
    alias dcomp="docker compose"
  else
    if command_exists docker-compose >/dev/null 2>&1; then
      alias dcomp="docker-compose"
    fi
  fi
fi

if command_exists kubectl; then
  alias ktl="kubectl"
fi

if command_exists eza; then
  zi ice from'gh-r' as'program' sbin'**/eza -> eza' atclone'cp -vf completions/eza.zsh _eza'
  zi light eza-community/eza
  unalias -m 'l'
  unalias -m 'la'
  unalias -m 'll'
  unalias -m 'llm'
  unalias -m 'ls'
  unalias -m 'lt'
  unalias -m 'lx'
  unalias -m 'tree'
  alias l='eza --git-ignore $eza_params'
  alias la='eza -lbhHigUmuSa'
  alias ll='eza --all --header --long $eza_params'
  alias llm='eza --all --header --long --sort=modified $eza_params'
  alias ls='eza $eza_params'
  alias lt='eza --tree $eza_params'
  alias lx='eza -lbhHigUmuSa@'
  alias tree='eza --tree $eza_params'
fi

if command_exists nvim; then
  unalias -m 'vim'
  alias vim='nvim'

  export VISUAL='nvim'
  export EDITOR='nvim'
fi

if command_exists bat; then
  unalias -m 'cat'
  alias cat='bat -pp'
fi

if command_exists broot; then
  br_path="${HOME}/.config/broot/launcher/bash/br"
  if [ -f "${br_path}" ]; then
    source "${br_path}"
  fi
fi

if command_exists chezmoi; then
  chemzoi_source_path=$(chezmoi source-path)
  export DOTFILES_DIR="$chemzoi_source_path"
fi

source-env() {
  if [ $# -eq 0 ]; then
    echo "${usage}"
    exit 1
  fi

  for file in "$@"
  do
    if [ ! -f "${file}" ]; then
      echo-err "the given file : ${file} does not exist"
      exit 1
    fi

    source <(cat "${file}" | sed -n -e '/^#/d;/^\s*$/d' -e "s/'/'\\\''/g" -e "s/=\(.*\)/='\1'/g" -e 's/.*/export &/p')
  done
}

reload-shell() {
  exec zsh -il
}
