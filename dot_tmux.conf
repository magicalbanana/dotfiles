# vim: ft=tmux

#-------------------------------------------------------------------------------
#   Previous Config
#-------------------------------------------------------------------------------
# set default shell
# {{ if eq .chezmoi.os "darwin" }}
# set -g default-command "reattach-to-user-namespace -l $SHELL"
# {{ else }}
# set -g default-command "$SHELL -l"
# {{ end  }}
# set -g default-shell "$SHELL"
# # joining panes
# bind-key J command-prompt -p "join pane from:"  "join-pane -s '%%'"
# bind-key S command-prompt -p "send pane to:"  "join-pane -t '%%'"
# # Moving windows
# bind-key -r > swap-window -d -t :+
# bind-key -r < swap-window -d -t :-
# # Back and forth
# bind-key bspace previous-window
# bind-key space next-window
# bind-key / next-layout # Overridden
# # Synchronize panes
# bind-key * set-window-option synchronize-pane
# # Start windows and panes at 1, not 0
# set -g base-index 1
# set -g pane-base-index 1

#-------------------------------------------------------------------------------
#   TMUX CONFIG
#-------------------------------------------------------------------------------
# NOTE: this overrides specify terminal capabilities you are overriding within tmux,
# this should "normally" be "xterm-256color" or "tmux-256color" but in the case of
# kitty it should be "xterm-kitty" so the solution/workaround here is to use the
# value of $TERM. This might not work for all terminals.
# see:
# https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/
# https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.term
set -g default-terminal "${TERM}"
set -as terminal-features ",${TERM}:RGB"
#-------------------------------------------------------------------------------
#  Terminal settings {{{1
#-------------------------------------------------------------------------------
# -> https://github.com/alacritty/alacritty/issues/1628
# References:
#   * https://github.com/neovim/neovim/pull/9097
#   * https://github.com/tmux/tmux/issues/1492
# Allow undercurls for terminals that support them.
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Allow coloured undercurls for terminals that support them.
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
# kitty graphics protocol
set -gq allow-passthrough on
# }}}
#-------------------------------------------------------------------------------
#  Prefix {{{1
#-------------------------------------------------------------------------------
set-option -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+

bind a last-window

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
# super useful when using "grouped sessions" and multi-monitor setup
set-option -wg aggressive-resize on
set-option -sg escape-time 10
set-option  -g focus-events on
set-option  -g history-limit 100000
set-option  -g renumber-windows on

bind r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \; display "Reloaded!"

bind . next-layout

unbind z # unbind default zoom
bind Space resize-pane -Z
# }}}
#-------------------------------------------------------------------------------
#  Display {{{1
#-------------------------------------------------------------------------------
set-option    -g set-titles on
set-option    -g set-titles-string '❐ #S ● #I'
set-option    -g allow-rename on
set-option    -g pane-base-index 1
set-option    -g base-index 1
set-option    -g monitor-activity on
set-option   -sg repeat-time 600
set-option    -g display-time 1000
set-option    -g status-interval 5
set-option   -wg automatic-rename on
set-option    -g automatic-rename-format '#{b:pane_current_path}'
set-option    -g monitor-activity on
set-option    -g visual-activity off
# Disable tmux statusline on zooming into a pane
# @see https://gist.github.com/bartj3/6d3bd8efd2ceaf02d443
# set-hook -g after-resize-pane "if-shell \"tmux list-panes -F '#F' | grep -q Z\" \"set -g status off\" \"set -g status on\""
# }}}
#-------------------------------------------------------------------------------
#  Navigation {{{1
#-------------------------------------------------------------------------------
set-option -g mouse on

bind C-f command-prompt -p find-session 'switch-client -t %%' # find session
bind-key C-j display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

bind '\' split-window -h -c '#{?pane_path,#{pane_path},#{pane_current_path}}'
bind - split-window -v -c '#{?pane_path,#{pane_path},#{pane_current_path}}'
unbind '"'
unbind %

setw -g mode-keys vi # set vi mode for copy mode
# more settings to make copy-mode more vim-like
bind Escape copy-mode
# setup 'v' to begin selection as in Vim
unbind-key -T copy-mode-vi Enter
bind-key -T copy-mode-vi v send-keys   -X begin-selection
bind-key -T copy-mode-vi c-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys   -X copy-selection
if-shell '[[ $(uname -s) = Linux ]]' {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
} {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
}

# Synchronize all panes in a window
bind y setw synchronize-panes
# easier and faster switching between next/prev window
bind p previous-window
bind n next-window

# detach client
bind-key d detach
bind-key C-d detach

# Cycle to next pane
bind-key -r Tab select-pane -t :.+

# previous window
bind-key BSpace previous-window

# swap panes
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U

unbind -T copy-mode-vi MouseDragEnd1Pane

# Smart pane switching with awareness of Vim splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'
# }}}
#-------------------------------------------------------------------------------
#  Status Bar {{{1
#-------------------------------------------------------------------------------
bind-key b set-option status

INACTIVE_FG_COLOR='#5C6370'
ACTIVE_FG_COLOR='#FAC863'

set-option -g status on
set-option -g status-position top
set-option -g status-style fg=terminal
set-option -g status-style bg=terminal
set-option -g status-justify centre
set-option -g status-interval 1

# NOTE: these use nested conditionals and "," and "}" must be escaped
search_icon="#{?window_active,#{?window_zoomed_flag,#[fg=blue],},} "
pane_count="#[default]#{?window_active,#[fg=$INACTIVE_FG_COLOR](#{window_panes}),}"
status_items="#[default]#{?window_bell_flag,#[fg=red] ,}$pane_count $search_icon"

# see: https://github.com/tmux-plugins/tmux-battery
set -g @batt_icon_status_charged ''
set -g @batt_icon_status_attached ''
set -g @batt_icon_status_charging ''
set -g @batt_icon_status_discharging ''
set -g @batt_remain_short 'true'

battery="#{battery_color_fg}#[bg=default]#{battery_icon_status}"
ram="#[bold,italics]RAM: #{ram_fg_color}#{ram_icon}"

set -g status-left-length  80
set -g status-right-length 70
# Options -> ⧉ ❐
set -g status-left "#{?client_prefix,#[fg=#ffffff bg=#22252B],#[fg=#e5c07b,bold]} ❐ #S "
# alternate date format "%a %d %b"
right_sep="#[default,dim,fg=#343d46]•"
set -g status-right "#[fg=$INACTIVE_FG_COLOR]%A, %d %b #[fg=blue,bold,underscore]%H:%M#[default] $right_sep $battery "

set-window-option -g window-status-style fg=$INACTIVE_FG_COLOR
set-window-option -g window-status-current-style fg=white
set-window-option -g window-status-current-format " #I. #[bold,italics]#T $status_items"
set-window-option -g window-status-format " #I. #[italics]#T $status_items"
set-window-option -g window-status-activity-style none # defaults to reverse
set-window-option -g window-status-separator "#[fg=$INACTIVE_FG_COLOR]"

# tmux commandline styling
set-option -g message-style fg=yellow,bg=terminal,bold
# styling when in command mode i.e. vi or emacs mode in tmux command line
set-option -g message-command-style fg=green,bg=terminal,bold,blink
# styling for the search indicator
set-option -g mode-style bg=terminal,fg=brightgreen,bold
# }}}
#-------------------------------------------------------------------------------
#  Pane border {{{1
#-------------------------------------------------------------------------------
set-option        -g pane-active-border-style fg=colour51
set-option        -g pane-border-style        fg='#343d46'
# }}}

if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# List of plugins
# Supports `github_username/repo` or full git repo URLs
#-------------------------------------------------------------------------------
#  Plugins {{{1
#-------------------------------------------------------------------------------
# TODO:
# - Find an alternative to kitty hints kitten in tmux
#
#-------------------------------------------------------------------------------
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sessionist'
#-------------------------------------------------------------------------------
# Saves and restores tmux sessions beyond system crashes and restarts
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Auto saves tmux environment and keeps tmux running
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'on'
set -g @resurrect-strategy-nvim 'session'
#-------------------------------------------------------------------------------
# Adds better bindings for switching windows,panes & resizing
set -g @plugin 'tmux-plugins/tmux-pain-control'
set-option -g @pane_resize "10"
#-------------------------------------------------------------------------------
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
#-------------------------------------------------------------------------------
set -g @plugin 'tmux-plugins/tmux-open'

# vi-copy keys
# -----------------------------------------------
# set -g @yank_action 'copy-pipe-no-clear'
# set -g @copy_use_osc52_fallback on

# vim tmux focus events
# set -g focus-events on

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
# if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
#     "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"
# yank="~/.tmux/yank.sh"
#
# bind -T copy-mode DoubleClick1Pane select-pane \;\
#   send -X select-word \;\
#   send -X copy-pipe-no-clear "$yank"
# bind -T copy-mode-vi DoubleClick1Pane select-pane \;\
#   send -X select-word \;\
#   send -X copy-pipe-no-clear "$yank"
# bind -n DoubleClick1Pane select-pane \;\
#   copy-mode -M \; send -X select-word \;\
#   send -X copy-pipe-no-clear "$yank"
# bind -T copy-mode TripleClick1Pane select-pane \;\
#   send -X select-line \;\
#   send -X copy-pipe-no-clear "$yank"
# bind -T copy-mode-vi TripleClick1Pane select-pane \;\
#   send -X select-line \;\
#   send -X copy-pipe-no-clear "$yank"
# bind -n TripleClick1Pane select-pane \;\
#   copy-mode -M \;\
#   send -X select-line \;\
#   send -X copy-pipe-no-clear "$yank"
# bind -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$($yank)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"
#
# bind -T copy-mode    C-c send -X copy-pipe-no-clear "$yank"
# bind -T copy-mode-vi C-c send -X copy-pipe-no-clear "$yank"
# bind-key y send-keys C-l C-a \; run-shell 'sleep 2.25' \;\
#   copy-mode \; send-keys -X begin-selection \;\
#   send-keys -X -N 100 'cursor-down' \;\
#   send-keys -X 'end-of-line' \;\
#   send-keys -X 'previous-word' \;\
#   send-keys -X 'next-word-end' \;\
#   send-keys -X copy-pipe-and-cancel "$yank" \;\
#   send-keys C-e \;\
#   display-message "line copied"
#
# bind -T copy-mode-vi Y send-keys -X copy-line
#
# bind -T copy-mode-vi / command-prompt -i -p "(search down)" "send -X search-forward-incremental \"%%%\""
# bind -T copy-mode-vi ? command-prompt -i -p "(search up)" "send -X search-backward-incremental \"%%%\""

# renew environment
# -------------------------------------
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'
